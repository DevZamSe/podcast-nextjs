{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/macbook/Desktop/web/nextjs/podcasts/pages/channel.jsx\";\nimport React from 'react';\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport PodcastList from '../components/PodcastList';\nimport Series from '../components/Series';\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openPodcast: null\n    };\n  }\n\n  static async getInitialProps({\n    query\n  }) {\n    try {\n      let idChannel = query.id;\n      const [reqChannel, reqAudios, reqSeries] = await Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)]);\n\n      if (reqChannel.status >= 400) {\n        return {\n          channel: null,\n          audioClips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      }\n\n      const dataChannel = await reqChannel.json();\n      const channel = dataChannel.body.channel;\n      const dataAudios = await reqAudios.json();\n      const audioClips = dataAudios.body.audio_clips;\n      const dataSeries = await reqSeries.json();\n      const series = dataSeries.body.channels;\n      return {\n        channel,\n        audioClips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n\n    if (statusCode !== 200) {\n      return /*#__PURE__*/_jsxDEV(Error, {\n        statusCode: statusCode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      title: channel.title,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: channel.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Series, {\n        series: series\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(PodcastList, {\n        audioClips: audioClips\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/macbook/Desktop/web/nextjs/podcasts/pages/channel.jsx"],"names":["React","Error","Layout","PodcastList","Series","Component","constructor","props","state","openPodcast","getInitialProps","query","idChannel","id","reqChannel","reqAudios","reqSeries","Promise","all","fetch","status","channel","audioClips","series","statusCode","dataChannel","json","body","dataAudios","audio_clips","dataSeries","channels","e","render","title"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,eAAe,cAAcJ,KAAK,CAACK,SAApB,CAA6B;AAExCC,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAb;AACH;;AAED,eAAaC,eAAb,CAA6B;AAACC,IAAAA;AAAD,GAA7B,EAAsC;AAElC,QAAG;AACC,UAAIC,SAAS,GAAGD,KAAK,CAACE,EAAtB;AAEA,YAAM,CAACC,UAAD,EAAaC,SAAb,EAAwBC,SAAxB,IAAqC,MAAMC,OAAO,CAACC,GAAR,CAAY,CACzDC,KAAK,CAAE,sCAAqCP,SAAU,EAAjD,CADoD,EAEzDO,KAAK,CAAE,sCAAqCP,SAAU,cAAjD,CAFoD,EAGzDO,KAAK,CAAE,sCAAqCP,SAAU,iBAAjD,CAHoD,CAAZ,CAAjD;;AAMA,UAAIE,UAAU,CAACM,MAAX,IAAqB,GAAzB,EAA+B;AAC3B,eAAO;AAACC,UAAAA,OAAO,EAAE,IAAV;AAAgBC,UAAAA,UAAU,EAAE,IAA5B;AAAkCC,UAAAA,MAAM,EAAE,IAA1C;AAAgDC,UAAAA,UAAU,EAAEV,UAAU,CAACM;AAAvE,SAAP;AACH;;AAED,YAAMK,WAAW,GAAG,MAAMX,UAAU,CAACY,IAAX,EAA1B;AACA,YAAML,OAAO,GAAGI,WAAW,CAACE,IAAZ,CAAiBN,OAAjC;AAEA,YAAMO,UAAU,GAAG,MAAMb,SAAS,CAACW,IAAV,EAAzB;AACA,YAAMJ,UAAU,GAAGM,UAAU,CAACD,IAAX,CAAgBE,WAAnC;AAEA,YAAMC,UAAU,GAAG,MAAMd,SAAS,CAACU,IAAV,EAAzB;AACA,YAAMH,MAAM,GAAGO,UAAU,CAACH,IAAX,CAAgBI,QAA/B;AAEA,aAAO;AAAEV,QAAAA,OAAF;AAAWC,QAAAA,UAAX;AAAuBC,QAAAA,MAAvB;AAA+BC,QAAAA,UAAU,EAAC;AAA1C,OAAP;AACH,KAvBD,CAuBE,OAAMQ,CAAN,EAAQ;AACN,aAAO;AAACX,QAAAA,OAAO,EAAE,IAAV;AAAgBC,QAAAA,UAAU,EAAE,IAA5B;AAAkCC,QAAAA,MAAM,EAAE,IAA1C;AAAgDC,QAAAA,UAAU,EAAE;AAA5D,OAAP;AACH;AAEJ;;AAEDS,EAAAA,MAAM,GAAG;AAEL,UAAM;AAAEZ,MAAAA,OAAF;AAAWC,MAAAA,UAAX;AAAuBC,MAAAA,MAAvB;AAA+BC,MAAAA;AAA/B,QAA8C,KAAKjB,KAAzD;;AAEA,QAAIiB,UAAU,KAAK,GAAnB,EAAwB;AACpB,0BAAO,QAAC,KAAD;AAAO,QAAA,UAAU,EAAIA;AAArB;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AAED,wBAAO,QAAC,MAAD;AAAQ,MAAA,KAAK,EAAEH,OAAO,CAACa,KAAvB;AAAA,8BACH;AAAA,kBAAKb,OAAO,CAACa;AAAb;AAAA;AAAA;AAAA;AAAA,cADG,eAGH,QAAC,MAAD;AAAQ,QAAA,MAAM,EAAGX;AAAjB;AAAA;AAAA;AAAA;AAAA,cAHG,eAKH,QAAC,WAAD;AAAa,QAAA,UAAU,EAAGD;AAA1B;AAAA;AAAA;AAAA;AAAA,cALG;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AAQH;;AAtDuC","sourcesContent":["import React from 'react'\n\nimport Error from './_error'\nimport Layout from '../components/Layout'\nimport PodcastList from '../components/PodcastList'\nimport Series from '../components/Series'\n\nexport default class extends React.Component{\n\n    constructor(props){\n        super(props)\n        this.state = { openPodcast: null }\n    }\n\n    static async getInitialProps({query}) {\n\n        try{\n            let idChannel = query.id\n\n            const [reqChannel, reqAudios, reqSeries] = await Promise.all([\n                fetch(`https://api.audioboom.com/channels/${idChannel}`),\n                fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`),\n                fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)\n            ])\n\n            if( reqChannel.status >= 400 ) {\n                return {channel: null, audioClips: null, series: null, statusCode: reqChannel.status}                \n            }\n\n            const dataChannel = await reqChannel.json()\n            const channel = dataChannel.body.channel\n            \n            const dataAudios = await reqAudios.json()        \n            const audioClips = dataAudios.body.audio_clips\n\n            const dataSeries = await reqSeries.json()\n            const series = dataSeries.body.channels\n\n            return { channel, audioClips, series, statusCode:200 }\n        } catch(e){\n            return {channel: null, audioClips: null, series: null, statusCode: 503}\n        }\n    \n    }\n\n    render() {\n\n        const { channel, audioClips, series, statusCode } = this.props\n\n        if( statusCode !== 200 ){\n            return <Error statusCode = {statusCode} />\n        }\n\n        return <Layout title={channel.title}>\n            <h1>{channel.title}</h1>\n\n            <Series series= {series} />\n\n            <PodcastList audioClips={ audioClips } />\n\n        </Layout>\n    }\n}"]},"metadata":{},"sourceType":"module"}