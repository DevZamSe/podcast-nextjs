{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport Error from './_error';\nimport Layout from '../components/Layout';\nimport PodcastList from '../components/PodcastList';\nimport Series from '../components/Series';\nexport default class extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"openPodcast\", (event, podcast) => {\n      event.preventDefault();\n      this.setState({\n        openPodcast: podcast\n      });\n    });\n\n    this.state = {\n      openPodcast: null\n    };\n  }\n\n  static async getInitialProps({\n    query\n  }) {\n    try {\n      let idChannel = query.id;\n      const [reqChannel, reqAudios, reqSeries] = await Promise.all([fetch(`https://api.audioboom.com/channels/${idChannel}`), fetch(`https://api.audioboom.com/channels/${idChannel}/audio_clips`), fetch(`https://api.audioboom.com/channels/${idChannel}/child_channels`)]);\n\n      if (reqChannel.status >= 400) {\n        return {\n          channel: null,\n          audioClips: null,\n          series: null,\n          statusCode: reqChannel.status\n        };\n      }\n\n      const dataChannel = await reqChannel.json();\n      const channel = dataChannel.body.channel;\n      const dataAudios = await reqAudios.json();\n      const audioClips = dataAudios.body.audio_clips;\n      const dataSeries = await reqSeries.json();\n      const series = dataSeries.body.channels;\n      return {\n        channel,\n        audioClips,\n        series,\n        statusCode: 200\n      };\n    } catch (e) {\n      return {\n        channel: null,\n        audioClips: null,\n        series: null,\n        statusCode: 503\n      };\n    }\n  }\n\n  render() {\n    const {\n      channel,\n      audioClips,\n      series,\n      statusCode\n    } = this.props;\n    const {\n      openPodcast\n    } = this.state;\n\n    if (statusCode !== 200) {\n      return /*#__PURE__*/_jsx(Error, {\n        statusCode: statusCode\n      });\n    }\n\n    return /*#__PURE__*/_jsxs(Layout, {\n      title: channel.title,\n      children: [/*#__PURE__*/_jsx(\"h1\", {\n        children: channel.title\n      }), openPodcast && /*#__PURE__*/_jsx(\"div\", {\n        children: \"Hay un podcast abierto\"\n      }), /*#__PURE__*/_jsx(Series, {\n        series: series\n      }), /*#__PURE__*/_jsx(PodcastList, {\n        audioClips: audioClips\n      })]\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}